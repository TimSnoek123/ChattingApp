@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@using ChattingApp.Hubs;
@implements IAsyncDisposable
@page "/"
@attribute [Authorize]

<h1>Contacts</h1>

@switch (hubConnection.State)
{
    case HubConnectionState.Connected:
        <div class="oi oi-circle-check" style="color:green"> Connected</div>
        break;
    case HubConnectionState.Reconnecting:
        <div class="oi oi-circle-x" style="color:orange"> Reconnecting</div>
        break;
    case HubConnectionState.Connecting:
        <div class="oi oi-circle-x" style="color:orange"> Connecting</div>
        break;
    default:
        <div class="oi oi-circle-x" style="color:red"> Disconnected</div>
        break;
}

<ul class="list-group">
    @foreach (var user in WebRtcHub.ConnectedClients)
    {
        @if (user.Key != hubConnection.ConnectionId)
        {
            <li @onclick="@(async () => await JS.InvokeVoidAsync("CreateRTCConnection", user.Key))" class="list-group-item list-group-item-action">@user.Value</li>
        }
    }
</ul>

@*Move this to mainlayout*@
<Modal @ref="modal">
    <Title>Called by user</Title>
    <Body>
        <p>Click to accept call!</p>
        <button class="btn btn-primary" @onclick="() => AcceptCall()">Accept call</button>
        <button class="btn btn-danger" @onclick="() => DeclineCall()">Decline call</button>
    </Body>
</Modal>

@code{
    private HubConnection hubConnection;
    public Modal modal = new Modal();

    //Make model for this
    private string incomingId;
    private string incomingLocalDescription;


    public async void AcceptCall()
    {
        await JS.InvokeVoidAsync("onOffer", incomingId, incomingLocalDescription);
        modal.Close();
    }

    public void DeclineCall()
    {
        modal.Close();
    }

    protected override async Task OnInitializedAsync()
    {
        if (hubConnection != null)
            return;

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/WebRtc"))
            .Build();

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("OnNewUserAsync", "testname");

        hubConnection.On<string, string>("OnOffer", (id, localDescription) =>
        {
            this.incomingId = id;
            this.incomingLocalDescription = localDescription;

            Console.WriteLine("Opening modal");
            if (!modal.Opened)
                modal.Open();
        });

        hubConnection.On("OnDisconnected", this.StateHasChanged);
        hubConnection.On("OnNewUser", this.StateHasChanged);

        hubConnection.On<string, string>("OnCandidate", async (id, candidate) =>
        {
            await JS.InvokeVoidAsync("addCandidate", id, candidate);
        });

        hubConnection.On<string, string>("OnAnswer", async (id, localDesciption) =>
        {
            await JS.InvokeVoidAsync("setRemoteDescription", id, localDesciption);
        });


        await JS.InvokeVoidAsync("SetDotnetHelper", DotNetObjectReference.Create(this));
    }

    [JSInvokable]
    public async Task SendCandidateAsync(string id, string candidate)
    {
        await hubConnection.SendAsync("OnCandidateAsync", id, candidate);
    }

    [JSInvokable]
    public async Task SendOfferAsync(string id, string localDescription)
    {
        await hubConnection.SendAsync("OnOfferAsync", id, localDescription);
    }

    [JSInvokable]
    public async Task SendAnswerAsync(string id, string description)
    {
        await hubConnection.SendAsync("OnAnswerAsync", id, description);
    }

    public async ValueTask DisposeAsync()
    {
        await hubConnection.DisposeAsync();
    }
}